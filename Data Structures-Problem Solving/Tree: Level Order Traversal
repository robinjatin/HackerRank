import java.util.*;
import java.io.*;

class Node {
    Node left;
    Node right;
    int data;
    
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class Solution {

	/* 
    
    class Node 
    	int data;
    	Node left;
    	Node right;
	*/
	public static void levelOrder(Node root) {
      /*Queue<Node> queue=new LinkedList<>(); 
queue.add(root); 
while(!queue.isEmpty()) 
{ 
Node tempNode=queue.poll(); 
System.out.print(tempNode.data+" "); 
if(tempNode.left!=null) 
queue.add(tempNode.left); 
if(tempNode.right!=null) 
queue.add(tempNode.right); 
}}*/
      int h=height(root);
      for(int i=1;i<=h;i++)
      {
          printLevel(root,i);
      }

    }
    static int height(Node root)
    {
        if(root==null)
      return 0;
      else{
        int h1=height(root.right);
        int h2=height(root.left);
        if(h1>h2)
        {
            return h1+1;
        }
        else
        return h2+1;
      }
    }
    static void printLevel(Node root,int level)
    {
        if(root==null)
        return;
        if(level==1)
        {
            System.out.print(root.data+" ");
        }
        else if(level>1){
            printLevel(root.left,level-1);
            printLevel(root.right,level-1);
        }
    }

	public static Node insert(Node root, int data) {
        if(root == null) {
            return new Node(data);
        } else {
            Node cur;
            if(data <= root.data) {
                cur = insert(root.left, data);
                root.left = cur;
            } else {
                cur = insert(root.right, data);
                root.right = cur;
            }
            return root;
        }
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int t = scan.nextInt();
        Node root = null;
        while(t-- > 0) {
            int data = scan.nextInt();
            root = insert(root, data);
        }
        scan.close();
        levelOrder(root);
    }	
}
